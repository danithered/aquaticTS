---
title: "Toy model"
subtitle: "Temperature dependent dynamics in aquatic communities"
format: 
  revealjs:
    toc: true
    chalkboard:
      buttons: false
author: "Dániel Vörös"
date: today
echo: false
cache: true
fig-align: center
editor_options: 
  chunk_output_type: console
---

```{r, setup2, include=FALSE, message=F, cache=F}
#libraries that reload
library(tidyr)
library(ggplot2)
library(deSolve)
library(RColorBrewer)
library(gridExtra)
library(plotly)
library(cowplot)
```

```{r, setup, include=FALSE, message=F}
# libraries that not reload everytime
library(geodata)
```

# Climate

## Getting climate data

-   `geodata` package for downloading CMIP6 climate data
-   Tons of models (e.g. "CNRM-CM6-1-HR")
-   Socio - economic Pathways: 126, 245, 370 or [585]{.underline}
-   predictions for different time-intervals: 2021-2040, 2041-2060 or [2061-2080]{.underline}
-   monthly resolution: minimal-, maximal temperature, precipitation

------------------------------------------------------------------------

```{r load_climate_data, cache=T}
b <- xfun::cache_rds({
  #f <- "*EUR-44*"
  #UDG.datasets(pattern = f)
  
  #bio10 <- cmip6_world("CNRM-CM6-1-HR", "585", "2061-2080", var="tmin", res=10, path=tempdir())
  biomin <- cmip6_tile(15, 49, "CNRM-CM6-1-HR", "585", "2061-2080", var="tmin", res=10, path=tempdir())
  #bioavg <- cmip6_tile(15, 49, "CNRM-CM6-1-HR", "585", "2061-2080", var="tavg", res=10, path=tempdir())
  biomax <- cmip6_tile(15, 49, "CNRM-CM6-1-HR", "585", "2061-2080", var="tmax", res=10, path=tempdir())
  #b <- bio10$tmin01
  #bc <- crop(b, ext(-30, 50, 30, 80))
  
  plot(crop(biomax, ext(-11, 35, 42, 71)))

  cbind( (biomin[1447]), (biomax[1447]) )
})


```

## In time

```{r, dependson="load_climate_data"}
#plot(biomax)

#which(!is.nan(values(bio$wc2.1_30s_tmin_01)))
#barplot(unlist(biomin[1447]))
#barplot(unlist(biomax[1447]))


b2 = b |> 
  #select( !starts_with("no_A", ignore.case = F)) |> 
  pivot_longer(cols= everything(), names_to=c("parameter", "month"), values_to = "val", names_pattern = "wc2.1_30s_(.*)_(.*)")

b3 <- b2 |> pivot_wider(names_from = parameter, values_from = val)

ggplot(b3, aes(x=month))+
  geom_linerange(aes(ymin=tmin, ymax=tmax))+
  labs(x="Month", y="Ground temperature [Celsius degree]")

```


# Climate model by

## The model {.smaller}

$$C \frac{dT}{dt}=Q^* \sin{\omega t} + Q_0-B T$$

| sign     | meaning | value |
|:---------|:--------|------:
|$\omega$  | wavelength | $2\pi$ |
| $Q^*$    | amplitude of the seasonal variations | |
| $Q_0$    | annual mean insolation | |
| $B$      | longwave radiative feedback in our system: a measure of how efficiently a warm anomaly is radiated away to space | 2 $\frac{W}{m^2K}$ | 
| $C$      | heat capacity of the whole column | ?? $\frac{J} {m^2 K}$ |
| $\hat C$ | heat capacity | ?? |
| $T_0$    | annual mean temperature | variable |  
| $T^*$    | annual temperature amplitude | |

: {tbl-colwidths="[10, 75 ,10]"}

## Mean and amplitude {.smaller}

- Mean: 

    $$T_0=\frac{Q_0}{B}$$
- Amplitude: depends on heat capacity $\left ( \hat C = \frac{C \omega}{B} \right )$
      
  - general solution 
  
      $$T^* = \frac{Q^*}{B}\frac{1}{(1+\hat C^2) \cos {(\arctan{\hat C})}}$$
  
  - if $C=0 \to T_* = Q^* / B$
  - in shallow water $\hat C << 1 \to T^* = \frac{Q^*}{B}(1-\hat C)$

## Plot

```{r}
func2 <- function(t, state, parameters) {
  with(as.list(c(state, parameters )), {
    amp <- Tpar[max(which(Tpar$tfrom <= t)),"amp"]
    mean <- Tpar[max(which(Tpar$tfrom <= t)),"mean"]
    
    dX=(amp * sin(omega * (t + delay)) + mean - (B*X) )/C
    
    # w = t > et$min & t < et$max
    # if( any(w) ) {
    #   #cat(paste(round(t, 3), round(X, 2), round(dX, 2), "\n") )
    #   dX <- dX * et[w, "times"]
    # }
    list(dX, amp=amp, mean=mean)
  })
}

state <- c(X = 10)
times = seq(0, 10, by = 0.01)
parameters = list(omega= 2*pi, delay=0, B= 2, C=1)
parameters$Tpar <- data.frame(tfrom=0, amp= 10, mean=20)

#errors
length=0.1
no_errors = 0
at = runif(no_errors, 0, max(times))
parameters$et <- data.frame(min=at-length/2, max=at+length/2, times=rnorm(length(at), sd=6))

out2 <- ode(y = state, times = times, func = func2, parms = parameters)
ggplotly(ggplot(as.data.frame(out2), aes(x=time, y=X))+
  geom_line()+
  labs(x="Time", y="Temperature")+
  theme(legend.position = "none"))


#parameters$omega*t=0 #spring equinox
#parameters$omega*t=pi/2 #summer solistice
#parameters$omega*t=pi #fall equinox
#parameters$omega*t=3*pi/2 #winter solictice

T0 = (parameters$mean - parameters$A)/parameters$B # mean annual temperature
heat_capacity = parameters$C * parameters$omega/parameters$B 
sigma = atan(heat_capacity)
#parameters$amp/parameters$B #for C = 0
parameters$amp/parameters$B/(1+heat_capacity^2)/cos(atan(heat_capacity)) # general solution
#parameters$amp/parameters$B * (1-heat_capacity) # heat_capacity << 1 ~ shallow water 
```

## Scale it {.smaller}

```{r}
print_params <- function(..., knitr_params=list(row.names=F)){
  varnames=lapply(substitute(list(...))[-1], deparse)
  x <- list(...)
  names(x) <- varnames
  
  #unlist lists
  l <- sapply(x, is.list)
  for(w in which(l)){
    for(e in 1:length(x[[w]]) ){
      x[[names(x[[w]][e])]] <- unname(unlist(x[[w]][e]))
    }
  }
  x <- x[-which(l)]
  
  # concat stuff
  x <- lapply(x, function(x) paste(x, sep=", ", collapse = "; "))
  
  # make table
  table <- data.frame(parameter = names(x), value = unlist(x))
  
  # print stuff
  knitr_params$x <- table
  do.call(knitr::kable, knitr_params)
}
```

::: panel-tabset

### plot

```{r}
heat_capacity = 0.01

parameters$C = heat_capacity * parameters$B/parameters$omega


times <- seq(0, 10, by = 0.01)
b3_rep <- b3 |> 
  uncount(max(times)+1, .id="period") |>
  mutate(month=as.numeric(month)/12 + period-1-1/3) |>
  arrange(month)
b3_s <- b3_rep |>
  summarise(spline_x = spline(month, tmin)[["x"]], 
         spline_hi = spline(month, tmax)[["y"]], 
         spline_lo = spline(month, tmin)[["y"]])


upper_max = max(b3$tmax)
upper_min = min(b3$tmax)
lower_max = max(b3$tmin)
lower_min = min(b3$tmin)

tmin_range = (lower_max - lower_min)/2
tmax_range = (upper_max - upper_min)/2
amp_min = (lower_max - upper_min)/2
amp_max = (upper_max - lower_min)/2

```

```{r}
#T0 = 20
#amplitude = 15 #14.2 lehet max
# if( amplitude < max(tmin_range, tmax_range) ){ 
#   if( amplitude < min(tmin_range, tmax_range)){ #pici
#     T0 = runif(1, max(b3$tmin) - amplitude, min(b3$tmax) + amplitude) # max is above max(tmin) and min is belove min(tmax)
#   } else { # kozepes
#     T0 = runif(1, 
#                max(max(b3$tmin) - amplitude, min(b3$tmin) + amplitude), # max is above max(tmin) and min is above min(tmin)
#                min(min(b3$tmax) + amplitude, max(b3$tmax) - amplitude) ) #  min is belove min(tmax) and max is belove max(tmax)
#   }
# } else { #nagy
#   T0 = runif(1, min(b3$tmin) + amplitude, max(b3$tmax) - amplitude) # ha nagy
# }
#T0 = min(b3$tmin) + amplitude

#T0 = 3.823529

```

```{r}
#| fig-align: center

#get random amplitude and T0
parameters$Tpar <- data.frame(tfrom=seq(min(times), max(times), length.out=6), mean = NA, amp = NA, amplitude= NA, T0 = NA )
#parameters$Tpar <- data.frame(tfrom=0, mean = NA, amp = NA, amplitude= NA, T0 = NA )

for(row in 1:nrow(parameters$Tpar)){
  #row=1
  amplitude = runif(1, amp_min, amp_max)
  T0 = runif(1, 
             ifelse(tmin_range > amplitude, lower_max - amplitude, lower_min + amplitude), 
             ifelse(tmax_range > amplitude, upper_min + amplitude, upper_max - amplitude))
  
  # min + r*(max-min)
  
  
  
  parameters$Tpar[row, "T0"] = T0
  parameters$Tpar[row, "amplitude"] = amplitude
  parameters$Tpar[row, "mean"] = T0 * parameters$B
  parameters$Tpar[row, "amp"] = parameters$B * amplitude / (1 - heat_capacity) 
}


out2 <- ode(y = state, times = times, func = func2, parms = parameters)

ggplot()+
  #geom_ribbon(data=b3_rep, aes(x=month, ymin=tmin, ymax=tmax), fill="coral")+
  geom_ribbon(data=b3_s, aes(x=spline_x, ymax=spline_hi, ymin=spline_lo), fill="coral")+
  geom_line(data=as.data.frame(out2), aes(x=time, y=X, color=amp), linewidth=1.5)+
  coord_cartesian(xlim = range(times))+
  labs(x="Time", y="Temperature")+
  theme(legend.position = "none")

  
```


### parameters

```{r, cache=F}
knitr::kable(parameters$Tpar)
print_params(amp_min, amp_max, heat_capacity, parameters)
```

:::

## Extreme version 2

```{r}
add_extremes <- function(Tpar, no_extremes, prob_warm=0.5, l_extreme = 0.2, d_extreme=10){
  for(tx  in runif(no_extremes, min=0, max=max(Tpar$tfrom)) ){
    length_extreme = abs(rnorm(1, l_extreme, 0.1))
    diff_extreme = rnorm(1, d_extreme, 1)
    
    smaller = max(which(Tpar$tfrom < tx))
    
    while(Tpar$tfrom[smaller+1] < (tx+length_extreme)){
      tx = runif(1, min=0, max=max(Tpar$tfrom))
      smaller = max(which(Tpar$tfrom < tx))
    }
    
    before = Tpar[1:smaller,]
    after = Tpar[(smaller+1):nrow(Tpar),]
    
    if(runif(1) < prob_warm){ # warmer
      event = data.frame(tfrom=c(tx, tx+length_extreme), 
                         mean=c(Tpar[smaller, ]$mean + diff_extreme, Tpar[smaller, ]$mean), 
                         amp = Tpar[smaller, ]$amp, 
                         amplitude=NA, 
                         T0=NA)
    } else { # colder
          event = data.frame(tfrom=c(tx, tx+length_extreme), 
                         mean=c(Tpar[smaller, ]$mean - diff_extreme, Tpar[smaller, ]$mean), 
                         amp = Tpar[smaller, ]$amp, 
                         amplitude=NA, 
                         T0=NA)
    }
    
    Tpar <- rbind(before, event, after)
  }
  return(Tpar)
}
```


```{r}
parameters$Tpar <- add_extremes(parameters$Tpar, 3)

out2 <- ode(y = state, times = times, func = func2, parms = parameters)

ggplot()+
  #geom_ribbon(data=b3_rep, aes(x=month, ymin=tmin, ymax=tmax), fill="coral")+
  geom_ribbon(data=b3_s, aes(x=spline_x, ymax=spline_hi, ymin=spline_lo), fill="coral")+
  geom_line(data=as.data.frame(out2), aes(x=time, y=X, color=amp), linewidth=1.5)+
  coord_cartesian(xlim = range(times))+
  labs(x="Time", y="Temperature")+
  theme(legend.position = "none")

```



## Extreme temperature deviations

```{r}
#get a random amp and mean
amplitude = runif(1, amp_min, amp_max)
T0 = runif(1, 
           ifelse(tmin_range > amplitude, lower_max - amplitude, lower_min + amplitude), 
           ifelse(tmax_range > amplitude, upper_min + amplitude, upper_max - amplitude))
  
# min + r*(max-min)
  
  
parameters$Tpar <- data.frame(tfrom=0, 
                              mean = T0 * parameters$B, 
                              amp = parameters$B * amplitude / (1 - heat_capacity) , 
                              amplitude= amplitude, 
                              T0 = T0 )

times <- seq(0, 5, by = 0.01)
```


```{r}
set.seed(10)

#get_errors
length=0.01
no_errors = 4
at = runif(no_errors, 0, max(times))
parameters$et <- data.frame(min=at-length/2, max=at+length/2, times=rnorm(length(at), sd=0.5))


out2 <- ode(y = state, times = times, func = func2, parms = parameters)

ggplot()+
  #geom_ribbon(data=b3_rep, aes(x=month, ymin=tmin, ymax=tmax), fill="coral")+
  geom_ribbon(data=b3_s, aes(x=spline_x, ymax=spline_hi, ymin=spline_lo), fill="coral")+
  geom_vline(xintercept=at, color="red")+
  geom_line(data=as.data.frame(out2), aes(x=time, y=X), linewidth=1.5)+
  coord_cartesian(xlim = range(times))+
  labs(x="Time", y="Temperature")+
  theme(legend.position = "none")

```


## How to model temperature? {visibility="hidden"}

-   Sinus function in literature

```{r}
func <- function(t, state, parameters) {
  with(as.list(c(state, parameters )), {
    Tr <- Tpar[max(which(Tpar$tfrom <= t)),"Tr"]
    Tshift <- Tpar[max(which(Tpar$tfrom <= 0)),"Tshift"]
    
    dX <-  ( (Tr*cos(t)+Tshift)  -X)
    w = t > et$min & t < et$max
    if( any(w) ) {
      #cat(paste(round(t, 3), round(X, 2), round(dX, 2), "\n") )
      dX <- dX * et[w, "times"]
    }
    list(dX, Tr=Tr)
  })
}
```

```{r}
state <- c(X = 10)
times <- seq(0, 20, by = 0.01)
no_errors = 0
length=0.1
Tpar <- data.frame(tfrom=0, Tr = 20, Tshift = 10)
```

```{r eval_ode}
at = runif(no_errors, 0, max(times))
a = rnorm(length(at), sd=6)
parameters <- list(et = data.frame(min=at-length/2, max=at+length/2, times=a), 
                   Tpar = Tpar)

out <- ode(y = state, times = times, func = func, parms = parameters)

ggplot(as.data.frame(out), aes(x=time, y=X))+
  geom_line()+
  labs(x="Time", y="Temperature")

```

## Interannual variations {visibility="hidden"}

```{r}
state <- c(X = 10)
times <- seq(0, 50, by = 0.01)
no_errors = 0
length=0.1
Tpar <- data.frame(tfrom=6*0:10, Tr = rnorm(11, mean=20, sd=2), Tshift = rnorm(11, mean=10, sd=1))
```

```{r, cache=F}
at = runif(no_errors, 0, max(times))
a = rnorm(length(at), sd=6)
parameters <- list(et = data.frame(min=at-length/2, max=at+length/2, times=a), 
                   Tpar = Tpar)

out <- ode(y = state, times = times, func = func, parms = parameters)

ggplot(as.data.frame(out), aes(x=time, y=X, color=Tr))+
  geom_line()+
  labs(x="Time", y="Temperature")+
  theme(legend.position = "none")

```


## Extreme temperature deviations {visibility="hidden"}

```{r}
state <- c(X = 10)
times <- seq(0, 20, by = 0.01)
no_errors = 4
length=0.1
Tpar <- data.frame(tfrom=0, Tr = 20, Tshift = 10)
```

```{r}
set.seed(44)
#set.seed(85)

at = runif(no_errors, 0, max(times))
a = rnorm(length(at), sd=6)
parameters <- list(et = data.frame(min=at-length/2, max=at+length/2, times=a), 
                   Tpar = Tpar)

out <- ode(y = state, times = times, func = func, parms = parameters)

ggplot(as.data.frame(out), aes(x=time, y=X))+
  geom_line()+
  labs(x="Time", y="Temperature")
```



# Model

## Equations


$$\frac{dR}{dt}= \rho(K_R-R) - f(R) \sum N_g \\
\frac{dN_g}{dt}=N_g \left (b_g(T, R) - \delta(T) \right ) - N_g h_{sleep}(T) + D_g h_{wake}(T)\\
\frac{dD_g}{dt}= N_g h_{sleep}(T) - D_g h_{wake}(T) - D_g \delta_D$$

## Resource {.smaller}

$R$ is semi-chemostat: let's assume they are at $K_R(T)$

$$K_R(T) = d_K M_i^{b_K} e^{E_K \frac{T_0 - T}{k T T_0}}$$

```{r}
CtoK <- function(x) return(x+273.15)
KtoC <- function(x) return(x-273.15)
```


| variable |                                                                                           | value            |
|:---------|:------------------------------------------------------------------------------------------|-----------------:|
| $T$      | temperature (in Kelvin)                                                                   | variable         |
| $d_K$    | parameter-specific constant calculated for a body mass of 1 g and temperature of 293.15 K | ?                |
| $M_i$    | body mass                                                                                 |  ?               |
| $b_K$    | the exponent of the respective body-mass scaling relationship                             | $0.28$           |
| $E_K$    | activation energy                                                                         |   $0.71$         |
| $k$      | Boltzmann constant                                                                        | $8.62 x 10^{-5}$ |
| $T_0$    | normalisation temperature                                                                 |   $293.15$       |


## Carrying capacity ~ T

$$K(T, M) = d_K M^{0.28} e^{0.71 \frac{293.15 - T}{8.62 x 10^{-5} * T * 293.15}}$$

```{r}
K <- function(temp, mass=1, d=1) return(d*mass^0.28*exp(0.71*(293.15-temp)/8.62e-5/temp/293.15 ))
KC <- function(temp, mass=1, d=1) return(d*mass^0.28*exp(0.71*(293.15-CtoK(temp) )/8.62e-5/CtoK(temp)/293.15 ))
```

```{r}
Tmin = 20
Trange = 20
Tmax = Tmin+Trange
```


```{r}
#| fig-align: center

ggplot()+
  geom_function(fun=KC, xlim=c(10, 30), args=list(mass=1, d=0.5), aes(color="0.5") )+
  geom_function(fun=KC, xlim=c(10, 30), args=list(mass=1, d=1), aes(color="1") )+
  geom_function(fun=KC, xlim=c(10, 30), args=list(mass=1, d=2), aes(color="2") )+
  geom_function(fun=KC, xlim=c(10, 30), args=list(mass=1, d=0), aes(color="0") )+
  geom_function(fun=KC, xlim=c(10, 30), args=list(mass=1, d=-1), aes(color="-1") )+
  labs(x="Temperature [°C]", y=bquote(paste("Carrying capapcity " (K[R]))), caption = bquote(M == 1) )+
  scale_color_discrete(name=bquote(d[K] == {} ))
```

## Simplifying{.scrollable}

$$K(T, M) = d_K M^{0.28} e^{0.71 \frac{293.15 - T}{8.62 x 10^{-5} * T * 293.15}}= \\
=(d_K M^{0.28}) e^{ \frac{ 0.71 \times 293.15}{8.62 x 10^{-5} \times 293.15 } / T -  \frac{0.71}{8.62 x 10^{-5} * 293.15 }}= \\ 
=(d_K M^{0.28}) e^{ \frac{ 0.71 \times 293.15}{8.62 x 10^{-5} \times 293.15 } / T} /  e^{\frac{0.71}{8.62 x 10^{-5} * 293.15 }} = \\ 
=\frac{d_K M^{0.28}}{  e^{\frac{0.71}{8.62 x 10^{-5} * 293.15 }}} e^{ \frac{ 0.71 }{8.62 x 10^{-5} } / T} $$

$$\text{if } \alpha=\frac{d_K M^{0.28}}{  e^{\frac{0.71}{8.62 x 10^{-5} * 293.15 }}}, \beta = \frac{ 0.71 }{8.62 x 10^{-5} } \to K(T) = \alpha e^{\beta/T}$$

$$\frac{dR}{dt}= \rho(\alpha e^{\beta/T}-R) - f(R) \sum N_g$$

$$T=T^\circ+273.15$$


## Feeding

**All** $N_g$s are feeding on $R$ with *Holling-2* functional response, with attack rate $a$ and handling time $h$

$$f(R) = R \frac{a}{(1 + a h R)}$$

```{r}
#| fig-align: center

holling2 <- function(resource, attack=0.2, handling=0.4) attack * resource/(1 + attack * handling * resource)
#curve(holling2(x), from=0, to=40, xlab=bquote(K[R]), ylab=bquote(r[max]))
ggplot()+
  geom_function(fun=holling2, xlim=c(0, 40))+
  labs(x=bquote(K[R]), y=bquote(r[max]))
```

## Birth rate

Eppley curve: temperature acts on $f(R)$, **according to genotype** $g$ 

$$b_g(T) = f(R) a e^{b \frac{T-T_{min}}{T_{range}}} (T_{max}-T)(T-T_{min}) / c$$

$$c_g(b, T_{range}) = \\ = \int_{T_{min}}^{T_{max}} e^{b \frac{T-T_{min}}{T_{range}}} (T_{max}-T)(T-T_{min}) ~ dT= \\ =  \frac{2 + b + (b - 2) e^b}{b^3} {T_{range}}^3$$

## Birth rate maximum {.scrollable .smaller}

$$b_g(T) = c e^{b \frac{T-T_{min}}{T_{range}}} (T_{max}-T)(T-T_{min})=c e^{b \frac{T-T_{min}}{T_{range}}}(T_{max} T - T_{max}T_{min} - T^2 + TT_{min})$$

$$\frac{d ~ b_g(T)}{d~T} = c e^{b\frac{(T - T_{min})}{T_{range}}} \frac{b}{T_{range}} (T_{max} T - T_{max}T_{min} - T^2 + TT_{min}) +
ce^{b\frac{(T - T_{min})}{T_{range}}} (T_{max} - 2 T + T_{min}) = 0 $$
$$c e^{b\frac{T - T_{min}}{T_{range}}} \frac{b}{T_{range}} (T_{max} T - T_{max}T_{min} - T^2 + TT_{min}) = -
ce^{b\frac{T - T_{min}}{T_{range}}} (T_{max} - 2 T + T_{min})  $$
$$\frac{b}{T_{range}}T_{max} T - \frac{b}{T_{range}}T_{max}T_{min} - \frac{b}{T_{range}}T^2 + \frac{b}{T_{range}}TT_{min} = -T_{max} + 2 T - T_{min}  $$
$$\frac{b}{T_{range}}T_{max} T  - \frac{b}{T_{range}}T^2 + \frac{b}{T_{range}}TT_{min} - 2 T = -T_{max}  - T_{min} + \frac{b}{T_{range}}T_{max}T_{min} $$
$$- \frac{b}{T_{range}}T^2 + \left (\frac{b}{T_{range}}(T_{max}+ T_{min}) - 2 \right ) T = -T_{max}  - T_{min} + \frac{b}{T_{range}}T_{max}T_{min} $$
$$- \frac{b}{T_{range}}T^2 + \left (\frac{b}{T_{range}}(T_{range}+ 2T_{min}) - 2 \right ) T = -T_{range}  - 2T_{min} + \frac{b}{T_{range}}(T_{min}+T_{range})T_{min} $$
$$- \frac{b}{T_{range}}T^2 + \left (b+ \frac{b}{T_{range}}2T_{min} - 2 \right ) T + \left (T_{range}  + 2T_{min} - \frac{b}{T_{range}}(T_{min}+T_{range})T_{min} \right ) =0$$

$$T_{1,2}=\frac{-b \pm \sqrt{b^2 - 4ac}}{2a}, a=- \frac{b}{T_{range}}, b= \left (b+ \frac{b}{T_{range}}2T_{min} - 2 \right ), c=T_{range}  + 2T_{min} - \frac{b}{T_{range}}(T_{min}+T_{range})T_{min}$$
$$T_{1,2}=\frac{-\left (b+ \frac{b}{T_{range}}2T_{min} - 2 \right ) \pm \sqrt{\left (b+ \frac{b}{T_{range}}2T_{min} - 2 \right )^2 - 4(- \frac{b}{T_{range}})(T_{range}  + 2T_{min} - \frac{b}{T_{range}}(T_{min}+T_{range})T_{min})}}{-2 \frac{b}{T_{range}}}$$
$$T_{1,2}=\frac{
-(b+ 2\frac{b}{T_{range}}T_{min} - 2)  
\pm \sqrt{
\left (b+ 2\frac{b}{T_{range}}T_{min} - 2 \right )^2 
+ 4\frac{b}{T_{range}}(T_{range}  + 2T_{min} - \frac{b}{T_{range}}T_{min}(T_{min}+T_{range}))}}
{-2 \frac{b}{T_{range}}}$$

$$T_{1,2}=\frac{
-(b+ 2\frac{b}{T_{range}}T_{min} - 2)  
\pm \sqrt{
\left (b+ 2\frac{b}{T_{range}}T_{min} - 2 \right )^2 
+ 4\frac{b}{T_{range}}(T_{range}  + 2T_{min} - \frac{b}{T_{range}}T_{min}T_{min} - bT_{min}  )}}
{-2 \frac{b}{T_{range}}}$$

$$\left (b+ 2\frac{b}{T_{range}}T_{min} - 2 \right )^2 +4\frac{b}{T_{range}}  (T_{range}  + 2T_{min} - \frac{b}{T_{range}}T_{min}T_{min} - bT_{min}  )$$
$$\left (b+ 2\frac{b}{T_{range}}T_{min} - 2 \right )^2 +4b  + 8\frac{b}{T_{range}}T_{min} - 4 \left ( \frac{b}{T_{range}}T_{min} \right )^2 - 4b\frac{b}{T_{range}}T_{min} $$
$$\left (b+ 2X - 2 \right )^2 + 4b  + 8X - 4 X^2 - 4bX $$
$$\left ( b^2 + 2bX -2b + 2bX + 4X^2 -4X -2b -4X +4 \right ) + 4b  + 8X - 4 X^2 - 4bX = b^2 + 4$$
$$T_{1,2}=\frac{
-(b+ 2\frac{b}{T_{range}}T_{min} - 2)  
\pm \sqrt{
\left (b+ 2\frac{b}{T_{range}}T_{min} - 2 \right )^2 
+ 4b  + 8\frac{b}{T_{range}}T_{min} - 4 \left ( \frac{b}{T_{range}}T_{min} \right )^2 - 4b\frac{b}{T_{range}}T_{min} }}
{-2 \frac{b}{T_{range}}}$$

$$T_{1,2}=\frac{
-b -2\frac{b}{T_{range}}T_{min} + 2
\pm \sqrt{
b^2+4 }}
{-2 \frac{b}{T_{range}}}$$

```{r}
findOpt <- function(b, Trange, Tmin){
  nom=-2*b/Trange
  first = -b + nom*Tmin + 2
  second = sqrt(b^2+4)
  return( max(c((first+second)/nom, (first-second)/nom)) )
}
```


```{r, eval=F}
(c * (exp(b * (T - Tmin)/Trange) * (b/Trange)) * (Tmax - T) - 
    c * exp(b * (T - Tmin)/Trange))
* (T - Tmin) + c * exp(b * 
    (T - Tmin)/Trange) * (Tmax - T)
```


## Realized birth rate

- Temperature dependence: $K_R$; shape of curve by $g$
- Density dependence: common resource $R$

```{r}
b6 <- function(T, Tmin, Tmax, Trange, b, compensation, sumN = 0){
  r = exp(b * (T-Tmin)/Trange) * (Tmax - T) * (T - Tmin) / compensation
  r = r - abs(r*sumN/KC(T, d=100))
  return(ifelse(r < 0, 0, r))
}
```


```{r}
#| fig-align: center

A=10
b=1.9

compensation = (2+b+(b-2)*exp(b))*Trange^3/b^3/A

ggplot()+
  geom_vline(xintercept = findOpt(b=b, Trange = 10, Tmin = 20 ))+
  stat_function(fun = b6, 
                geom="area", fill="lightgreen",
                args=list(Tmin=20, Tmax=30, Trange=10, b=b, compensation=compensation, sumN = 0), 
                xlim = c(15, 35) )+
  geom_function(fun = b6, 
                args=list(Tmin=20, Tmax=30, Trange=10, b=b, compensation=compensation, sumN = 0), 
                xlim = c(15, 35) )+
  annotate(geom = "label", x=26, y=0.1, label="A == f(R) * c", parse=T, size=6)+
  labs(x="Temperature", y = bquote(b[g]))+
  coord_cartesian(ylim=c(-0.2, 0.4))+
  theme(legend.position = "none")
```

## Simplification

$$b_g(T) = f(R) a e^{b \frac{T-T_{min}}{T_{range}}} (T_{max}-T)(T-T_{min}) / c$$

$$B = e^{b/T_{range}}\\ d=T-T_{min}  \\  A = \frac{a}{c}$$

$$b_g(T) = f(R) a e^{\frac{b}{T_{range}}(T-T_{min})} (T_{max}-T)(T-T_{min}) / c = \\ = f(R) \frac{a}{c} \left(e^{ \frac{b}{T_{range}}}\right )^{(T-T_{min})} (T_{max}-T)(T-T_{min}) = \\ =f(R) A B^d (T_{max}-T)d$$

where 

- $f(R)$ is computed before in iteration step
- $A$ and $B$ are precomputed values
- $d$ is computed in place

## Death rate

Temperature acts on $\delta_g$

- cold: death by freezing
- warm: metabolism, low $O_2$

```{r, eval=FALSE}
#| fig-align: center

d9 <- function(T, x1=0, curve1=1, x2=0, curve2=0) 1/(1+exp(-(T-x1)*curve1)) + 1/(1+exp((T-x2)*curve2))

ggplot()+
  geom_function(fun= d9, xlim=c(-10, 50), args=list(x1=30, curve1=0.25, x2=-25, curve2=0.2))+
  coord_cartesian(ylim = c(0, 1))+
  labs(y=bquote(delta[g]), x="Temperature")

```


```{r}
#| fig-align: center

#d9b <- function(T, Tmin, Trange, flatness=50, baseline=0.05) (( T-(Tmin+Trange/2) )/flatness)^2+baseline
d9b <- function(T, Tmin, Trange, flatness=50, baseline=0.05, pow=3, at=0.2) abs(( T-(Tmin+Trange*at) )/flatness)^pow+baseline

ggplot()+
  geom_function(fun= d9b, xlim=c(-10, 50), args=list(Tmin=0, Trange=10, pow=2))+
  coord_cartesian(ylim = c(0, 1))+
  labs(y=bquote(delta[g]), x="Temperature")

```



## Simplification

$$T_{opt}=T_{min}+T_{range} r_{opt}$$

$$\delta_g = \left | \frac{T-T_{opt} }{d_{f}} \right |^{d_p}+d_b = \\ 
\delta_g = \left | (T-T_{opt})\frac{1}{d_{f}} \right |^{d_p}+d_b = \\ 
= {\left | (T-T_{opt}) {d_f}^{-1} \right |^{d_p}} +d_b $$

$$\frac{dN_g}{dt}=N_g \left (b_g(T, R) - \delta(T) \right ) - N_g h_{sleep}(T) + D_g h_{wake}(T) = \\
\frac{dN_g}{dt}=N_g \left (f(R) A B^d (T_{max}-T)d - {\left | (T- T_{opt}) {d_f}^{-1} \right |^{d_p}} -d_b \right ) - N_g h_{sleep}(T) + D_g h_{wake}(T)$$

## Death rate v 2

Temperature acts on $\delta_g$

- cold: death by freezing
- warm: metabolism, low $O_2$

$$\delta=d_{base} \left ( e^{E_{freezing} \frac{293.15-T}{8.62\times10^{-5}*T*293.15}}+e^{-E_{heat}\frac{293.15-T}{8.62\times10^{-5}*T*293.15}} \right )$$


```{r, eval=FALSE}
#| fig-align: center
d9 <- function(T, x1=0, curve1=1, x2=0, curve2=0) 1/(1+exp(-(T-x1)*curve1)) + 1/(1+exp((T-x2)*curve2))

d12 <- function(T, Efreeze, Eheat, death_basel, shift=0) {
  temp = (293.15-CtoK(T) )/8.62e-5/CtoK(T)/293.15
  temp2 = (293.15-CtoK(T+shift) )/8.62e-5/CtoK(T+shift)/293.15
  return(death_basel*(exp(Efreeze*temp)+exp(-Eheat*temp2)))
}

ggplot()+
  geom_function(fun= d12, 
                xlim=c(-10, 50), 
                args=list(Efreeze=0.1, Eheat=0.3, death_basel=.05))+
  coord_cartesian(ylim = c(0, 1))+
  labs(y=bquote(delta[g]), x="Temperature")#+
  #geom_hline(yintercept=.5, linetype="dashed")

```


## Death rate v 3 {.smaller}

::::{.columns}

::: {.column width="40%"}

Temperature acts on $\delta_g$

$$T_{n, freezing} = 273.15 - \Delta T/2 + T_{opt}\\ 
T_{n, heat} = 273.15 + \Delta T/2 + T_{opt} $$


:::

::: {.column width="5%"}

:::

::: {.column width="55%"}

$$\delta=d_{base} 
+ max \left (0, e^{E_{freezing} \frac{T_{n, freezing}-T}{8.62\times10^{-5}*T*T_{n, freezing}}}-1 \right ) + \\
+max \left (0, e^{-E_{heat}\frac{T_{n, heat}-T}{8.62\times10^{-5}*T*T_{n, heat}}}-1 \right )$$

:::

::::

```{r, eval=T}
#| fig-align: center
d13 <- function(T, Efreeze, Eheat, death_basel, shift=0, dist=0) {
  #death_basel = death_basel - sum(c(Efreeze, Eheat)==0)
  death_basel = death_basel
  Tn1=293.15-20+shift - dist/2
  Tn2=293.15-20+shift + dist/2
  temp1 = exp(Efreeze*(Tn1-CtoK(T) )/8.62e-5/CtoK(T)/Tn1)-1
  temp2 = exp(-Eheat*(Tn2-CtoK(T) )/8.62e-5/CtoK(T)/Tn2)-1
  return( death_basel + ifelse(temp1<0,0,temp1) + ifelse(temp2<0, 0, temp2) )
}

Efreeze=0.1
Eheat=0.3
dist=030
shift=19
ggplot()+
  geom_vline(xintercept = shift, alpha=0.5, linetype="dotted")+
  geom_function(fun= d13, 
                xlim=c(-10, 50), aes(color="only overheat"),
                args=list(Efreeze=0, Eheat=Eheat, death_basel=0, shift=shift, dist=dist))+
  geom_function(fun= d13, 
                xlim=c(-10, 50), aes(color="only freezing"),
                args=list(Efreeze=Efreeze, Eheat=0, death_basel=0, shift=shift, dist=dist))+
  geom_function(fun= d13, 
                xlim=c(-10, 50), aes(color="combined"), linewidth=2, linetype= "dashed",
                args=list(Efreeze=Efreeze, Eheat=Eheat, death_basel=0, shift=shift, dist=dist))+
  scale_color_discrete(name="")+
  coord_cartesian(ylim = c(0, 1))+
  labs(y=bquote(delta[g]), 
       x="Temperature", 
       caption=bquote(paste(E[freeze] == .(Efreeze), ", ",
                            E[heat] == .(Eheat), ", ",
                            d[base] == 0, ", ",
                            Delta ~ T == .(dist), ", ",
                            T[opt] == .(shift), ", "
                            ))
         )+
  theme(legend.position = "top")#+
  #geom_hline(yintercept=.5, linetype="dashed")

```


## Death rate v 4 {.smaller}

::::{.columns}

::: {.column width="35%"}

Temperature acts on $\delta_g$

$$T_{n, freezing} = 273.15 - \Delta T/2 + T_{opt}\\ 
T_{n, heat} = 273.15 + \Delta T/2 + T_{opt}$$

:::

::: {.column width="5%"}

:::

::: {.column width="60%"}


$$\delta=
\alpha \left (d_{base}+  \frac{e^{E_{freezing} \frac{T_{n, freezing}-T}{8.62\times10^{-5}*T*T_{n, freezing}}}  +
e^{-E_{heat}\frac{T_{n, heat}-T}{8.62\times10^{-5}*T*T_{n, heat}}}} {2} \right )$$

:::

::::

```{r, eval=T}
#| fig-align: center
d14 <- function(T, Efreeze, Eheat, death_basel, shift=0, dist=0, per=10) {
  neg = sum(c(Efreeze, Eheat)==0)
  #death_basel = death_basel
  Tn1=293.15-20+shift - dist/2
  Tn2=293.15-20+shift + dist/2
  temp1 = exp(Efreeze*(Tn1-CtoK(T) )/8.62e-5/CtoK(T)/Tn1)
  temp2 = exp(-Eheat*(Tn2-CtoK(T) )/8.62e-5/CtoK(T)/Tn2)
  if(neg>0)
    return( ((temp1+temp2)+death_basel - neg)/per)
  else
    return( ((temp1+temp2)/2+death_basel)/per )
}

Efreeze=0.6
Eheat=1.5
dist=30
shift=20
ggplot()+
  geom_vline(xintercept = shift, alpha=0.5, linetype="dotted")+
  geom_function(fun= d14, 
                xlim=c(-10, 50), aes(color="overheat"),
                args=list(Efreeze=0, Eheat=Eheat, death_basel=0, shift=shift, dist=dist))+
  geom_function(fun= d14, 
                xlim=c(-10, 50), aes(color="freeze"),
                args=list(Efreeze=Efreeze, Eheat=0, death_basel=0, shift=shift, dist=dist))+
  geom_function(fun= d14, 
                xlim=c(-10, 50), aes(color="combined"),
linewidth=2, linetype= "dashed",
                args=list(Efreeze=Efreeze, Eheat=Eheat, death_basel=0, shift=shift, dist=dist))+
  scale_color_discrete(name="shift")+
  coord_cartesian(ylim = c(0, 1))+
  labs(y=bquote(delta[g]), x="Temperature",
       caption=bquote(paste(E[freeze] == .(Efreeze), ", ",
                            E[heat] == .(Eheat), ", ",
                            d[base] == 0, ", ",
                            Delta ~ T == .(dist), ", ",
                            T[opt] == .(shift), ", ",
                            alpha == 10
                            )))+
  theme(legend.position = "top")#+
  #geom_hline(yintercept=.5, linetype="dashed")

```


## Cant make it simpler

$$\delta=d_{base}(e^{E_{freezing} \frac{293.15-T}{8.62\times10^{-5}*T*293.15}}+e^{-E_{heat}\frac{293.15-T}{8.62\times10^{-5}*T*293.15}} )= \\  
d_{base}(
e^{\frac{E_{frezing}}{8.62\times10^{-5}}/T} / e^{\frac{E_{freezing}}{8.62\times10^{-5}*293.15} }
+ e^{\frac{-E_{heat}}{8.62\times10^{-5}}/T} / e^{\frac{-E_{heat}}{8.62\times10^{-5}*293.15} } )= \\  
d_{base}(
e^{\frac{E_{frezing}}{8.62\times10^{-5}}/T} / e^{\frac{E_{freezing}}{8.62\times10^{-5}*293.15} }
+ e^{\frac{-E_{heat}}{8.62\times10^{-5}}/T} / e^{\frac{-E_{heat}}{8.62\times10^{-5}*293.15} } )= $$

$$\frac{293.15-(T^{\circ}+273.15)}{8.62\times10^{-5}*(T^{\circ}+273.15)*293.15} =
\frac{(293.15-273.15)-T^{\circ}}{(8.62\times10^{-5}*293.15*273.15)+(8.62\times10^{-5}*293.15)*T^{\circ}} = \\ 
\frac{120 - T^{\circ}}{6.90+0.03T^{\circ}} = 
\frac{120 }{6.90+0.03T^{\circ}} - \frac{T^{\circ}}{6.90+0.03T^{\circ}}$$

$$\frac{293.15-T}{8.62\times10^{-5}*T*293.15} =
\frac{1}{8.62\times10^{-5}*T} - \frac{1}{8.62\times10^{-5}*293.15}$$



## Replication

```{r}
ff10 <- function(T, d_a, d_b, pow=3, ...){
  b <- b10(T, ...)
  d <- d9b(T, Tmin=Tmin, Trange=Trange, pow=pow)
  return(b-d)
}

r10 <- function(T, Tmin, Tmax, Trange, b, compensation){
  r = exp(b * (T-Tmin)/Trange) * (Tmax - T) * (T - Tmin) / compensation
  return(ifelse(r < 0, 0, r))
}

KR10 <- function(T, sumN=0, K=40, d=100){
  KR <- KC(T, d)
  KR * (pmax(0, 1-sumN/K))
}

b10 <- function(T, b=1.9, attack = 0.2, handling = 0.4, a_comp=1, compensation = NA, sumN=0, ...){
  KR <- KR10(10, sumN)
  rmax <- holling2(KR, attack=attack, handling=handling)
  
  A=rmax*a_comp
  compensation = (2+b+(b-2)*exp(b))*Trange^3/b^3/A

  return(r10(T, b=b, compensation=compensation, ...))
}

```


```{r, eval=T}
#| fig-asp: 0.4
#| fig-align: center
#| out-width: 100%

d_a = 50
d_b = 0.15

Tmin = 20
Trange = 20
Tmax = Tmin+Trange

pow=3

cols = brewer.pal(4, "BrBG")
names(cols) <- LETTERS[1:4]
names(cols) <- cols

reso <- ggplot()+
  scale_colour_manual(values=cols, labels=c("80", "40", "0", "10"), name=bquote(paste( sum(), N == {} )) )+
  geom_function(fun = KR10, 
                args=list(sumN = 0), 
                xlim = c(Tmin-Trange/10,Tmax+Trange/10), aes(color=cols[1]) )+
  geom_function(fun = KR10, 
                args=list(sumN = 10), 
                xlim = c(Tmin-Trange/10,Tmax+Trange/10), aes(color=cols[2]) )+
  geom_function(fun = KR10, 
                args=list(sumN = 40), 
                xlim = c(Tmin-Trange/10,Tmax+Trange/10), aes(color=cols[3]))+
  geom_function(fun = KR10, 
                args=list(sumN = 80), 
                xlim = c(Tmin-Trange/10,Tmax+Trange/10), aes(color=cols[4])) +
  labs(x="Temperature", y = "Resource"
       )+
  #coord_cartesian(ylim=c(-0.5, 1))+
  theme(legend.position = "top", axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank())

birth <- 
  ggplot()+
  scale_colour_manual(values=cols, labels=c("80", "40", "0", "10"), name=bquote(paste( sum(), N == {} )) )+
  geom_function(fun = b10, 
                args=list(Tmin=Tmin, Tmax=Tmax, Trange=Trange, b=b, sumN = 0), 
                xlim = c(Tmin-Trange/10,Tmax+Trange/10), aes(color=cols[1]) )+
  geom_function(fun = b10, 
                args=list(Tmin=Tmin, Tmax=Tmax, Trange=Trange, b=b, sumN = 10), 
                xlim = c(Tmin-Trange/10,Tmax+Trange/10), aes(color=cols[2]) )+
  geom_function(fun = b10, 
                args=list(Tmin=Tmin, Tmax=Tmax, Trange=Trange, b=b, sumN = 40), 
                xlim = c(Tmin-Trange/10,Tmax+Trange/10), aes(color=cols[3]))+
  geom_function(fun = b10, 
                args=list(Tmin=Tmin, Tmax=Tmax, Trange=Trange, b=b, sumN = 80), 
                xlim = c(Tmin-Trange/10,Tmax+Trange/10), aes(color=cols[4])) +
  labs(x="Temperature", y = "Birth rate"#, 
       # caption = bquote(paste(T[min] == .(Tmin) ,
       #                        ", ", T[max] == .(Tmax), 
       #                        ", ", T[range] == .(Trange), 
       #                        ", ", A == .(A), 
       #                        ", ", b == .(b), 
       #                        ", ", M == 1, 
       #                        ", ", d[K] == 100,
       #                        ", ", delta[N] == 0.2))
       )+
  #coord_cartesian(ylim=c(-0.5, 1))+
  theme(legend.position = "none", axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank())

death <- ggplot()+
  geom_function(fun = d9b, xlim=c(Tmin-Trange/10,Tmax+Trange/10), args=list(Tmin=Tmin, Trange=Trange, pow=pow))+
  #coord_cartesian(ylim=c(0, 1))+
  labs(y="Death rate", x="Temperature")

Rv10 <- ggplot()+
  geom_rect(aes(xmin=Tmin, xmax=Tmax, ymin=-Inf, ymax=Inf), fill="red", alpha=0.1) +
  scale_colour_manual(values=cols, labels=c("80", "40", "0", "10"), name=bquote(paste( sum(), N == {} )) )+
  geom_function(fun = ff10, 
                args=list(Tmin=Tmin, Tmax=Tmax, Trange=Trange, b=b, compensation=compensation, sumN = 0, d_a=d_a, d_b=d_b), 
                xlim = c(Tmin-Trange/10,Tmax+Trange/10), aes(color=cols[1]) )+
  geom_function(fun = ff10, 
                args=list(Tmin=Tmin, Tmax=Tmax, Trange=Trange, b=b, compensation=compensation, sumN = 10, d_a=d_a, d_b=d_b), 
                xlim = c(Tmin-Trange/10,Tmax+Trange/10), aes(color=cols[2]) )+
  geom_function(fun = ff10, 
                args=list(Tmin=Tmin, Tmax=Tmax, Trange=Trange, b=b, compensation=compensation, sumN = 40, d_a=d_a, d_b=d_b), 
                xlim = c(Tmin-Trange/10,Tmax+Trange/10), aes(color=cols[3]))+
  geom_function(fun = ff10, 
                args=list(Tmin=Tmin, Tmax=Tmax, Trange=Trange, b=b, compensation=compensation, sumN = 80, d_a=d_a, d_b=d_b), 
                xlim = c(Tmin-Trange/10,Tmax+Trange/10), aes(color=cols[4])) +
  labs(x="Temperature", y = "Net replication rate", 
       subtitle = bquote(paste(T[min] == .(Tmin) ,
                              ", ", T[max] == .(Tmax), 
                              ", ", T[range] == .(Trange), 
                              ", ", A == .(A), 
                              ", ", b == .(b), 
                              ", ", M == 1, 
                              ", ", d[K] == 100,
                              ", ", delta[N] == 0.2))
       )+
  #coord_cartesian(ylim=c(-1, 1))+
  theme(legend.position = "none")


plot_grid(plot_grid(reso, birth, death, ncol=1, align="v"), Rv10, ncol=2, rel_widths = c(1, 2))
```


## Temperature depedence of $h_{sleep}$

::: columns
::: {.column width="45%"}
```{r}
ggplot()+
  geom_function(fun=function(x) dnorm(0) - dnorm(x), xlim=c(-3,3), linewidth=3)+
  theme(axis.text = element_blank())+
  labs(x="Temperature", y= bquote(t[sleep]))
```

![](dryfish.jpg){fig-align="center" width="50%"}
:::

::: {.column width="10%"}
:::

::: {.column width="45%" align="right"}
```{r}
ggplot()+
  geom_function(fun=function(x) 1/(1+exp(x)), xlim=c(-5,5), linewidth=3)+
  theme(axis.text = element_blank())+
  labs(x="Temperature", y= bquote(ts[sleep]))
```

![](Dragonfly.jpg)
:::
:::

## Temperature depedence of dormancy

$$h_{sleep}(T) = \frac{h_{range}}{1+e^{T-T_{opt}}} + h_{min}$$
$$h_{wake}(T) = \frac{h_{range}}{1+e^{-(T-T_{opt}) }} + h_{min}$$

```{r}
#| fig-align: center
Tmin=15
Trange = 10
Tmax= Tmin + Trange
tsleep <- function(x, Tmin, Trange, hrange=0.8, hmin=0.1, at=0.5) hrange/( 1+exp(  x-(Tmin+Trange*at) ) ) + hmin
twake  <- function(x, Tmin, Trange, hrange=0.8, hmin=0.1, at=0.5) hrange/( 1+exp(-(x-(Tmin+Trange*at))) ) + hmin
ggplot()+
  stat_function(fun=tsleep,
                geom="area",
                fill= "lightgreen",
                args = list(Tmin=Tmin, Trange=Trange),
                xlim=c(Tmin,Tmax),
                linewidth=3)+
  geom_function(fun=tsleep,
                args = list(Tmin=Tmin, Trange=Trange),
                xlim=c(Tmin-Trange/10,Tmax+Trange/10),
                linewidth=3)+
  geom_function(fun=twake,
                args = list(Tmin=Tmin, Trange=Trange),
                xlim=c(Tmin-Trange/10,Tmax+Trange/10),
                linewidth=1, color="grey", linetype="dashed" )+
  coord_cartesian(ylim=c(0,1))+
  #theme(axis.text = element_blank())+
  labs(x="Temperature", y= bquote(P[sleep]))
```


## Simplification


$$T_{diff}=T - T_{opt}$$


$$\frac{dN_g}{dt}=N_g \left (b_g(T, R) - \delta(T) \right ) - N_g h_{sleep}(T) + D_g h_{wake}(T) = \\
=N_g \left (f(R) A B^d (T_{max}-T)d - {\left | T_{diff} {d_f}^{-1} \right |^{d_p}} -d_b \right ) - N_g h_{sleep}(T) + D_g h_{wake}(T) = \\
=N_g \left (f(R) A B^d (T_{max}-T)d - {\left | T_{diff} {d_f}^{-1} \right |^{d_p}} -d_b -h_{sleep}(T) \right )+ D_g h_{wake}(T) $$

$$c_{min}=-(h_{min}+d_b)$$

So, at the end:

$$\frac{dN_g}{dt}=N_g \left (f(R) A B^d (T_{max}-T)d - {\left | T_{diff} {d_f}^{-1} \right |^{d_p}} -d_b -h_{sleep}(T) \right )+ D_g h_{wake}(T)$$

$$\frac{dD_g}{dt}= N_g h_{sleep}(T) - D_g (h_{wake}(T) + \delta_D)$$