---
title: "Evolution of thermal reaction norms"
subtitle: "results of a model realization"
author: "Dániel Vörös"
format: 
  html:
    toc: true
execute: 
  echo: false
params:
  dir: "/home/danielred/data/programs/aquaticTS/OUT/test_35"
editor_options: 
  chunk_output_type: console
---

```{r setup, message=FALSE}
#post-render: xcopy *_files output
knitr::opts_knit$set(root.dir = params$dir)
#setwd(params$dir)

library(tidyr)
library(cowplot)
library(ggplot2)
library(plotly)
```


```{r functions}
findOpt <- function(Trange, Tmin, b=1.9){
  nom=-2*b/Trange
  first = -b + nom*Tmin + 2
  second = sqrt(b^2+4)
  return( max(c((first+second)/nom, (first-second)/nom)) )
}
CtoK <- function(x) return(x+273.15)
KtoC <- function(x) return(x-273.15)
K <- function(temp, mass=1, d=1) return(d*mass^0.28*exp(0.71*(293.15-temp)/8.62e-5/temp/293.15 ))
KC <- function(temp, mass=1, d=1) return(d*mass^0.28*exp(0.71*(293.15-CtoK(temp) )/8.62e-5/CtoK(temp)/293.15 ))
holling2 <- function(resource, attack=0.2, handling=0.4) attack * resource/(1 + attack * handling * resource)
b6 <- function(T, Tmin, Tmax, Trange, b, compensation, sumN = 0){
  r = exp(b * (T-Tmin)/Trange) * (Tmax - T) * (T - Tmin) / compensation
  r = r - abs(r*sumN/KC(T, d=100))
  return(ifelse(r < 0, 0, r))
}

b6mod <- function(T, Tmin, Tmax, Trange, b, compensation){
  r = exp(b * (T-Tmin)/Trange) * (Tmax - T) * (T - Tmin) / compensation
  return(ifelse(r < 0, 0, r))
}

findOpt <- Vectorize(function(b, Trange, Tmin){
  nom=-2*b/Trange
  first = -b + nom*Tmin + 2
  second = sqrt(b^2+4)
  return( max(c((first+second)/nom, (first-second)/nom)) )
})

plot_birthrate <- function(Tmin, Trange, b, A, range=c(Tmin-Trange/2, Tmin+Trange*1.5 ) ){

  cols <- hcl.colors(n=length(b), palette = "viridis")  
  names(cols) <- b
  Topts <- findOpt(b=b, Trange = Trange, Tmin = Tmin )
  compensations = (2+b+(b-2)*exp(b))*Trange^3/b^3/A
  Topt_vals <- b6(Topts, Tmin=Tmin, Tmax=Tmin+Trange, Trange=Trange, b=b, compensation=compensations, sumN = 0)
  
  pl <- ggplot()+
    geom_point(aes(x=Topts,
                   y=Topt_vals, 
                   color=as.character( b ) ))+
    labs(x="Temperature", y = bquote(b[g]), caption = bquote(paste(T[min] == .(Tmin), ", ", T[range] == .(Trange) )))+
    #coord_cartesian(ylim=c(-0.2, 0.4))+
    theme(legend.position = "top")
  
  for(bval in b){
    compensation = (2+bval+(bval-2)*exp(bval))*Trange^3/bval^3/A
    Topt = findOpt(b=bval, Trange = Trange, Tmin = Tmin )
    Topt_val = b6(Topt, Tmin=Tmin, Tmax=Tmin+Trange, Trange=Trange, b=bval, compensation=compensation, sumN = 0)
    
    pl = pl +
      geom_vline(xintercept = Topt, color=cols[as.character(bval)], linetype="dotted")+
      geom_hline(yintercept = Topt_val, color=cols[as.character(bval)], linetype="dotted")+
      # stat_function(fun = b6, 
      #               geom="area", alpha=0.5, 
      #               fill=cols[as.character(bval)],
      #               args=list(Tmin=Tmin, Tmax=Tmin+Trange, Trange=Trange, b=bval, compensation=compensation, sumN = 0), 
      #               xlim = c(Tmin-Trange/2, Tmin+Trange*1.5 ) )+
      geom_function(fun = b6,
                    color=cols[as.character(bval)],
                    args=list(Tmin=Tmin, Tmax=Tmin+Trange, Trange=Trange, b=bval, compensation=compensation, sumN = 0), 
                    #xlim = c(Tmin-Trange/2, Tmin+Trange*1.5 ) )+
                    xlim = range  )
  }
  
  pl + 
    annotate(geom = "label", x=Tmin+Trange/2, y=Topt_val/2, label="A == f(R) * a / c", parse=T, size=6)+
    scale_color_manual(values=cols, name="b")  
}

# mapping d9 to d12: Efreeze=flatness, Eheat=pow, death_basel=baseline
d9_12 <- function(T, Tmin, Trange, flatness=50, baseline=0.05, pow=3, at=10, constdeath=F){
  if(constdeath){ # use d12
    return( d12(T=T, Efreeze=flatness, Eheat=pow, death_basel=baseline) )
  } else { # use d9
    return(d9b(T=T, Tmin=Tmin, Trange=Trange, flatness=flatness, baseline=baseline, pow=pow, at=at))
  }
}

d9_14 <- function(T, Tmin, Trange, Topt, death_variables, death_type){
  if(as.numeric(death_type) == 0){
    return(death_variables[1])
  } else if(as.numeric(death_type) == 1){
    return(d9b(T=T, Tmin=Tmin, Trange=Trange, 
               flatness=death_variables[2], baseline=death_variables[1], pow=death_variables[3], 
               at=Topt))
  } else if(as.numeric(death_type) == 2){
    return( d12(T=T, Efreeze=death_variables[2], Eheat=death_variables[3], death_basel=death_variables[1]) )
  } else if(as.numeric(death_type) == 3){
    return(d14(T=T, 
               Efreeze=death_variables[2], Eheat=death_variables[3], death_basel=death_variables[1],
               shift=Topt, 
               dist=death_variables[4], per=1/death_variables[5]) )
  } 
}

d9b <- function(T, Tmin, Trange, flatness=50, baseline=0.05, pow=3, at=10) abs(( T-at )/flatness)^pow+baseline


d12 <- function(T, Efreeze, Eheat, death_basel, shift=0) {
  temp = (293.15-CtoK(T) )/8.62e-5/CtoK(T)/293.15
  temp2 = (293.15-CtoK(T+shift) )/8.62e-5/CtoK(T+shift)/293.15
  return(death_basel*(exp(Efreeze*temp)+exp(-Eheat*temp2)))
}

d14 <- function(T, Efreeze, Eheat, death_basel, shift=0, dist=0, per=10) {
  neg = sum(c(Efreeze, Eheat)==0)
  #death_basel = death_basel
  Tn1=293.15-20+shift - dist/2
  Tn2=293.15-20+shift + dist/2
  temp1 = exp(Efreeze*(Tn1-CtoK(T) )/8.62e-5/CtoK(T)/Tn1)
  temp2 = exp(-1*Eheat*(Tn2-CtoK(T) )/8.62e-5/CtoK(T)/Tn2)
  if(neg>0)
    return( ((temp1+temp2)+death_basel - neg)/per)
  else
    return( ((temp1+temp2)/2+death_basel)/per )
}

plot_death <- function(Tmin, Trange, Topt, flatness, baseline, pow, range=c(Tmin-Trange/2, Tmin+Trange*1.5 ), constdeath=F){
    ggplot()+
    stat_function(fun= d9_14,
                  geom="area",
                  fill= "lightgreen",
                  args=list(Tmin=Tmin, Trange=Trange, Topt=Topt,
                            death_variables=par$death_variables, death_type=par$death_type),
                  xlim=c(Tmin,Tmin+Trange),
                  linewidth=3)+
    geom_function(fun= d9_14, 
                  args=list(Tmin=Tmin, Trange=Trange, Topt=Topt,
                            death_variables=par$death_variables, death_type=par$death_type)
                  )+
    coord_cartesian(ylim = c(0, NA))+
    labs(y=bquote(delta[g]), 
         x="Temperature", 
         caption = bquote(paste(T[min] == .(Tmin), ", ", T[range] == .(Trange) )))
}

plot_death_comp <- function(Tmin, Trange, Topt, death_type, death_parameters, range=c(Tmin-Trange/2, Tmin+Trange*1.5 )){
  
  if(as.numeric(death_type) %in% c(1, 2)){
    if(as.numeric(death_type) == 2) constdeath=T else constdeath=F
    plot_death(Tmin=Tmin, Trange=Trange, Topt=Topt, 
               flatness=death_parameters[2], baseline=death_parameters[1], pow=death_parameters[3],
               range=range, constdeath=constdeath)
  } else if(as.numeric(death_type) == 3){
    dp = ggplot()+
      geom_vline(xintercept = Topt, alpha=0.5, linetype="dotted")+
      geom_function(fun= d14, 
                    xlim=range,
                    args=list(Efreeze=death_parameters[2], 
                              Eheat=death_parameters[3], 
                              death_basel=death_parameters[1], 
                              shift=Topt, dist=death_parameters[4],
                              per=1/death_parameters[5]))+
      labs(y=bquote(delta[g]), x="Temperature",
           caption=bquote(paste(E[freeze] == .(death_parameters[2]), ", ",
                                E[heat] == .(death_parameters[3]), ", ",
                                d[base] == .(death_parameters[1]), ", ",
                                Delta ~ T == .(death_parameters[4]), ", ",
                                T[opt] == .(Topt), ", ",
                                beta == .(death_parameters[5])
                                )))+
      theme(legend.position = "top")
    dp + coord_cartesian(ylim=c(0, min(layer_scales(dp)$y$range$range[2], 2)))
  }
  
}

tsleep <- function(x, Tmin, Trange, hrange=0.8, hmin=0.1, at=0.5) hrange/( 1+exp(  x-at ) ) + hmin
twake  <- function(x, Tmin, Trange, hrange=0.8, hmin=0.1, at=0.5) hrange/( 1+exp(-(x-at)) ) + hmin


plot_sleep <- function(Tmin, Trange, Topt, hrange, hmin, range=c(Tmin-Trange/2, Tmin+Trange*1.5 )){
  Tmax= Tmin + Trange
  ggplot()+
    stat_function(fun=tsleep,
                  geom="area",
                  fill= "lightgreen",
                  args = list(Tmin=Tmin, Trange=Trange, hrange=hrange, hmin=hmin, at=Topt),
                  xlim=c(Tmin,Tmax),
                  linewidth=3)+
    geom_function(fun=tsleep,
                  args = list(Tmin=Tmin, Trange=Trange, hrange=hrange, hmin=hmin, at=Topt),
                  xlim = range,
                  linewidth=3)+
    geom_function(fun=twake,
                  args = list(Tmin=Tmin, Trange=Trange, hrange=hrange, hmin=hmin, at=Topt),
                  xlim = range,
                  linewidth=1, color="grey", linetype="dashed" )+
    coord_cartesian(ylim=c(0,NA))+
    #theme(axis.text = element_blank())+
    labs(x="Temperature", y= bquote(P[sleep]), caption = bquote(paste(T[min] == .(Tmin), ", ", T[range] == .(Trange) )))
}

net_rep <- function(T, R, Tmin, Trange, b, death_variables, death_type, A, attack, handling){
  Tmax= Tmin + Trange
  Topt = findOpt(b=b, Trange = Trange, Tmin = Tmin )
  feeding = holling2(R, attack=attack, handling=handling)
  compensation = (2+b+(b-2)*exp(b))*Trange^3/b^3/A/feeding
  birth <- b6mod(T, Tmin, Tmax, Trange, b, compensation)
  d <- d9_14(T, Tmin, Trange, Topt=Topt, 
             death_variables=death_variables, death_type=death_type)
  return(birth-d)
}

net_rep_range <- function(Ts, R, Tmin, Trange, b, death_variables, death_type, A, attack, handling){
  is_pos <- rep(NA, length(Ts))
  names(is_pos) <- Ts
  #T=Ts[1]
  for(T in Ts){
    Tmax= Tmin + Trange
    Topt = findOpt(b=b, Trange = Trange, Tmin = Tmin )
    feeding = holling2(R, attack=attack, handling=handling)
    compensation = (2+b+(b-2)*exp(b))*Trange^3/b^3/A/feeding
    birth <- b6mod(T, Tmin, Tmax, Trange, b, compensation)
    de <- d9_14(T, Tmin, Trange, Topt=Topt, 
             death_variables=death_variables, death_type=death_type)
    is_pos[as.character(T)] <- (birth-de) > 0
  }
  
  if(any(is_pos)){
    return( range(Ts[is_pos]) )
  } else {
    return(c(NA, NA))
  }
}

only_rep <- function(T, R, Tmin, Trange, b, A, attack, handling){
  Tmax= Tmin + Trange
  feeding = holling2(R, attack=attack, handling=handling)
  compensation = (2+b+(b-2)*exp(b))*Trange^3/b^3/A/feeding
  b <- b6mod(T, Tmin, Tmax, Trange, b, compensation)
  
  return(b)
}

par_to_num <-function(par){
  if(is.character(par)){
    letters <- strsplit(par, "")[[1]]
    if(sum(letters == "[") == 1 & sum(letters == "]") == 1){ # it is a vector
      par = strsplit(substring(par, which(letters == "[")+1, which(letters == "]")-1), ",")[[1]]
    } 
    par = as.numeric(par) 
  }
    
  return(par)
}
```


```{r read_output}
d <- read.table("output.tsv", sep="\t", header=T)
```


```{r read_types}
types <- read.table("types.tsv", header=T)
types$type <- as.numeric(substr(types$type,5, nchar(types$type)))
minT <- min(types$Tmin)
maxT <- max(types$Tmin+types$Trange)
#plot(d$time, d$temperature)
#head(d)
```


```{r to_long_data}

dl <- pivot_longer(d, !time & !resource & !temperature, names_to = "species", values_to = "abundance")
dl$state <- as.factor(substr(dl$species,1,1))
dl$type <- as.numeric(substr(dl$species,2,nchar(dl$species)))
#dl$Trange <- sapply(dl$type,function(x) types[types$type == x, "Trange"])
#dl$Tmin <- sapply(dl$type,function(x) types[types$type == x, "Tmin"])
#dl$Topt <- sapply(dl$type,function(x) types[types$type == x, "Topt"])
#dl$Topt <- apply(dl[,c("Tmin", "Trange")], 1, function(x) findOpt(Trange=x["Trange"], Tmin = x["Tmin"]))
```

# Parameters

for simulation `r params$dir`

```{r reading_parameters}
par <- readLines("params.ini")
par <- strsplit(par[!substr(par, 1, 1) %in% c("", "#")], "=")
par_names <- sapply(par, function(x) x[1])
par <- lapply(par, function(x) x[2])
names(par) <- par_names

b <- par_to_num(par$`Eppley-shape`)
if(length(b) > 1){
  if(length(b)==3) b = seq(b[1],b[2],b[3])
  else b = seq(b[1],b[2],1)
}


```


```{r print_parameters}
knitr::kable(data.frame(parameter=names(par), value=unlist(par)), row.names = F)
```

```{r}
if("death_type" %in% names(par)){ # new version
  par$death = as.numeric(strsplit(substr(par$death, 2, nchar(par$death)-1), ",")[[1]])
  
  if(par$death_type == "0"){ # constant
    constdeath = T
  } else if(par$death_type == "1"){ # power
    constdeath = F
    par$death_basel = death_variables[1]
    par$death_flat = death_variables[2]
    par$death_pow = death_variables[3]
  } else if(par$death_type == "2"){ # exp-const
    constdeath = T
    par$death_basel = death_variables[1]
    par$death_flat = death_variables[2]
    par$death_pow = death_variables[3]
  } else if(par$death_type == "3"){ # exp
    constdeath = F
  } else {
    cat("Not expected this death_type argument!\n")
  }
} else {
  if( "use_constant_death" %in% names(par) ){ # not so new version
    constdeath = par$use_constant_death %in% c("true", "1")
    par$death_type = 2
    death_variables = par_to_num(par$death)
    par$death = death_variables
    par$death_basel = death_variables[1]
    par$death_flat = death_variables[2]
    par$death_pow = death_variables[3]
  } else { # old version
    par$death_type = 1
    par$death = c(par$death_basel, par$death_flat, par$death_pow)
    constdeath=F
  }
}
```



# Plots

## Timeplot

```{r timeplot}
ab <- ggplot(dl)+
  geom_line(aes(x=time, y=abundance, color=species))+
  theme(legend.position = "none")

temp <- ggplot(dl)+
  geom_line(aes(x=time, y=temperature))+
  theme(legend.position = "none")

res <- ggplot(dl)+
  geom_line(aes(x=time, y=resource))+
  theme(legend.position = "none")

plot_grid(ab, temp, res, ncol=1)
```

## Abundance in last timestep

```{r raster_plot}
if(!"b" %in% colnames(types)) types$b <- b
last_types <- dl[dl$time == max(dl$time) & dl$state == "N", c("abundance", "type")]
last_types <- cbind(
  last_types, 
  do.call(rbind, lapply(last_types$type, function(x) types[types$type == x, c("Trange", "Tmin", "Topt", "b")]) )
  )

ggplot(last_types, aes(Tmin, Trange))+
  geom_raster(aes(fill=abundance))+
  facet_wrap(~b)

```

```{r plot_Topts}
try({
ggplot(last_types, aes(Tmin, Trange))+
  geom_raster(aes(fill=Topt))+
  labs(title="Topt")+
  facet_wrap(~b)
})
```


```{r realised_tempniche, eval=F}
try({
  types$netmin <- NA
  types$netmax <- NA
  temprange <- range(d$temperature)
  userange = seq(temprange[1], temprange[2], length.out=100)
  reslevel = dl$resource[nrow(dl)]
  
  for(casei in 1:nrow(types)){
    case = types[casei,]
  
    netrange <- net_rep_range(
      Ts=userange, 
      R=reslevel,
      flatness=as.numeric(par$death_flat), 
      baseline=as.numeric(par$death_basel), 
      pow=as.numeric(par$death_pow), 
      A=as.numeric(par$`Eppley-scale`), 
      Tmin=case$Tmin, Trange=case$Trange, 
      b=case$b, 
      attack = as.numeric(par$attack), handling = as.numeric(par$handling),
      constdeath=constdeath)
    types[casei, "netmin"] <- netrange[1]
    types[casei, "netmax"] <- netrange[2]
    
  }
  
  types$netrange <- types$netmax-types$netmin
  types$netrange[is.na(types$netrange)] <- 0
  
  ggplot(types, aes(Tmin, Trange))+
    geom_raster(aes(fill=netrange))+
    labs(title=paste("realised temporal niche width at R=",reslevel ))+
    facet_wrap(~b)
})
```


## Averages over time

```{r plot_average_strategy_over_t}
types$Tmax <- types$Tmin+types$Trange

avgs <- dl[dl$state == "N", ] |> 
  group_by(time) |>
  summarise(
    mean_Tmin = weighted.mean(sapply(type, function(x, types) types[types$type==x, "Tmin"], types), abundance),
    mean_Tmax = weighted.mean(sapply(type, function(x, types) types[types$type==x, "Tmax"], types), abundance),
    mean_Topt = weighted.mean(sapply(type, function(x, types) types[types$type==x, "Topt"], types), abundance))

ggplot(avgs, aes(x=time))+
  geom_ribbon(aes(ymin=mean_Tmin, ymax=mean_Tmax), alpha=0.5)+
  geom_line(aes(y=mean_Topt))+
  labs(y="Mean of optimal temperature range", x="Time")
```

## Winner strategy over time

```{r plot_winner_strategy_over_t, message=FALSE}
bests <- 
  dl[dl$state == "N", ] |> 
  group_by(time) |>
  summarise(
    best_type = type[abundance == max(abundance)],
    no_bests = length(type[abundance == max(abundance)]),
    best_Tmin = mean(types[types$type == type[abundance == max(abundance)],"Tmin"]),
    best_Topt = mean(types[types$type == type[abundance == max(abundance)],"Topt"]),
    best_Tmax = mean(types[types$type == type[abundance == max(abundance)],"Tmax"]) )
  
ggplot(bests[bests$no_bests==1,], aes(x=time))+
  geom_ribbon(aes(ymin=best_Tmin, ymax=best_Tmax), alpha=0.5)+
  geom_line(aes(y=best_Topt))+
  labs(y="Temperature range of most abundant genotype", x="Time")
```


# The model

$$C \frac{dT}{dt}=Q^* \sin{\omega t} + Q_0-B T$$

$$\frac{dR}{dt}= \rho(K_R-R) - f(R) \sum N_g$$

$$\frac{dN_g}{dt}=N_g \left (b_g(T, R) - \delta(T) \right ) - N_g h_{sleep}(T) + D_g h_{wake}(T)$$

$$\frac{dD_g}{dt}= N_g h_{sleep}(T) - D_g h_{wake}(T) - D_g \delta_D$$

# Parameter visualisations

## Resource carrying capacity 

$$K(T, M) = d_K M^{0.28} e^{0.71 \frac{293.15 - T}{8.62 x 10^{-5} * T * 293.15}}$$

| variable | name |                                                                                           | value               |
|:---------|:-----|:------------------------------------------------------------------------------------------|--------------------:|
| $T$      |      | temperature (in Kelvin)                                                                   | variable            |
| $d_K$    | d_K  | parameter-specific constant calculated for a body mass of 1 g and temperature of 293.15 K | `r (par$d_K)`  |
| $M_i$    | mass | body mass                                                                                 | `r (par$mass)` |





```{r plot_par_KR}
#| fig-align: center

ggplot()+
  geom_function(fun=KC, xlim=c(minT-10, maxT+10), args=list(mass=as.numeric(par$mass), d=as.numeric(par$d_K)) )+
  labs(x="Temperature [°C]", y=bquote(paste("Carrying capapcity " (K[R]))) )+
  scale_color_discrete(name=bquote(d[K] == {} ))
```

## Feeding

$$f(R) = R \frac{a}{(1 + a h R)}$$

| variable | name     |                                                                                  | value                       |
|:---------|:---------|:---------------------------------------------------------------------------------|----------------------------:|
| $R$      |          | resource                                                                         | variable                    |
| $a$      | attack   | attack rate                                                                      | `r par$attack`              |
| $h$      | handling | handling time                                                                    | `r par$handling`            |

```{r plot_par_feeding}
#| fig-align: center

ggplot()+
  geom_function(fun=holling2, xlim=c(0, 40), args=list(attack=as.numeric(par$attack), handling=as.numeric(par$handling) ))+
  labs(x="R", y=bquote(f(R)))
```

## Birth rate

$$b_g(T) = f(R) s e^{b \frac{T-T_{min}}{T_{range}}} (T_{max}-T)(T-T_{min}) / c$$

$$c_g(b, T_{range}) = \int_{T_{min}}^{T_{max}} e^{b \frac{T-T_{min}}{T_{range}}} (T_{max}-T)(T-T_{min}) ~ dT= \frac{2 + b + (b - 2) e^b}{b^3} {T_{range}}^3$$

| variable    | name         |                                                                     | value                         |
|:------------|:-------------|:--------------------------------------------------------------------|------------------------------:|
| $f(R)$      |              | feeding                                                             | see above                     |
| $T_{max}$   |              | maximum of breeding temperature range                               | variable                      |
| $T_{min}$   |              | minimum of breeding temperature range                               | variable                      |
| $T_{range}$ |              | range of breeding temperature range $T_{max}-T_{min}$               | variable                      |
| $s$         | Eppley-scale | scaling factor between feeding and birth                            | `r (par$"Eppley-scale")` |
| $b$         | Eppley-shape | constant defining shape of Eppley-curve                             | `r (par$"Eppley-shape")` |


```{r}
A = as.numeric(par$"Eppley-scale")
```

::: panel-tabset

```{r}
case = types[types$Trange==min(types$Trange) & types$Tmin==min(types$Tmin),]
```

### $T_{min}=$ `r case$Tmin[1]`, $T_{range}=$ `r case$Trange[1]`

```{r}
#| fig-align: center
plot_birthrate(Tmin=case$Tmin[1], Trange=case$Trange[1], b=case$b, A=A, range = c(minT-10, maxT+10))
```







```{r}
case = types[types$Trange==min(types$Trange) & types$Tmin==max(types$Tmin),]
```

### $T_{min}=$ `r case$Tmin[1]`, $T_{range}=$ `r case$Trange[1]`

```{r}
#| fig-align: center

plot_birthrate(Tmin=case$Tmin[1], Trange=case$Trange[1], b=case$b, A=A, range = c(minT-10, maxT+10))
```







```{r}
case = types[types$Trange==max(types$Trange) & types$Tmin==min(types$Tmin),]
```
 
### $T_{min}=$ `r case$Tmin[1]`, $T_{range}=$ `r case$Trange[1]`

```{r}
#| fig-align: center

plot_birthrate(Tmin=case$Tmin[1], Trange=case$Trange[1], b=case$b, A=A, range = c(minT-10, maxT+10))
```







```{r}
case = types[types$Trange==max(types$Trange) & types$Tmin==max(types$Tmin),]
```

### $T_{min}=$ `r case$Tmin[1]`, $T_{range}=$ `r case$Trange[1]`

```{r}
#| fig-align: center

plot_birthrate(Tmin=case$Tmin[1], Trange=case$Trange[1], b=case$b, A=A, range = c(minT-10, maxT+10))
```









### Most abundant in last generation

```{r}
case = types[types$type == last_types[last_types$abundance == max(last_types$abundance), "type"],]
```

```{r}
#| fig-align: center
plot_birthrate(Tmin=case$Tmin, Trange=case$Trange, b=case$b, A=A, range = c(minT-10, maxT+10))
```

:::

## Death rate



```{r par_death_which, results='asis'}
if( as.numeric(par$death_type) == 2 ){
  cat("$$\\delta=d_{base} \\left ( e^{E_{freezing} \\frac{293.15-T}{8.62\\times10^{-5}*T*293.15}}+e^{-E_{heat}\\frac{293.15-T}{8.62\\times10^{-5}*T*293.15}} \\right )$$")
  table_to_print <- data.frame(variable=c("$d_{base}$", "$E_{freeze}$", "$E_{heat}$"), 
                               name=c("death_base", "E_freeze", "E_heat"), 
                               description=c("elevation of mortality rate function", 
                                             "speed of dying at a low temperature", 
                                             "speed of dying at a high temperature"),
                               value=c(par$"death_basel", par$"death_flat", par$"death_pow"))
} else if( as.numeric(par$death_type) == 1 ) {
  cat("$$\\delta_g = {\\left | (T-T_{opt}) {d_f}^{-1} \\right |^{d_p}} +d_b $$")
  table_to_print <- data.frame(variable=c("$d_f$", "$d_b$", "$d_p$", "$T_{opt}$"), 
                               name=c("death_flat", "death_basel", "death_pow", ""), 
                               description=c("flatness of mortality rate function", 
                                             "baseline mortality ", 
                                             "shape of the mortality function", 
                                             "optimal temperature computed from $T_{max}$, $T_{min}$ and $b$"),
                               value=c(par$"death_flat", par$"death_basel", par$"death_pow", "variable"))
} else if( as.numeric(par$death_type) == 3 ){
  cat("$$T_{n, freezing} = 273.15 - \\Delta T/2 + T_{opt} \\\\
  T_{n, heat} = 273.15 + \\Delta T/2 + T_{opt} \\\\
  \\delta_g=\\alpha \\left (d_{base}+  \\frac{e^{E_{freezing} \\frac{T_{n, freezing}-T}{8.62\\times10^{-5}*T*T_{n, freezing}}}  +
  e^{-E_{heat}\\frac{T_{n, heat}-T}{8.62\\times10^{-5}*T*T_{n, heat}}}} {2} \\right )$$")
  table_to_print <- data.frame(variable=c("$d_{base}$", "$E_{freeze}$", "$E_{heat}$", "$\\Delta T$", "$\\beta$"), 
                               name=c("death_base", "E_freeze", "E_heat", "deltaT", "beta"), 
                               description=c("elevation of mortality rate function", 
                                             "speed of dying at a low temperature", 
                                             "speed of dying at a high temperature",
                                             "the span of baseline death",
                                             ""),
                               value=par$death)
} else if( as.numeric(par$death_type) == 0 ){
  cat(paste("$$\\delta = ", par$death_parameters, "$$"))
  table_to_print <- data.frame(variable=c("$\\delta$"), 
                               name=c("value"), 
                               description=c("death rate for consumers"),
                               value=par$death_variables)
}
```


```{r printing_death_variables_as_table}
knitr::kable(table_to_print)
```

::: panel-tabset

```{r}
case = types[types$Trange==min(types$Trange) & types$Tmin==min(types$Tmin),]
```

### $T_{min}=$ `r case$Tmin[1]`, $T_{range}=$ `r case$Trange[1]`

```{r}
#| fig-align: center
plot_death_comp(Tmin = case$Tmin[1], Trange = case$Trange[1], Topt = case$Topt[1], 
                death_type=par$death_type, death_parameters=par$death, 
                range=c(minT-10, maxT+10))
# 
# plot_death(Tmin = case$Tmin[1], Trange= case$Trange[1], Topt = case$Topt[1], 
#            flatness = as.numeric(par$death_flat), baseline = as.numeric(par$death_basel), pow=as.numeric(par$death_pow), 
#            range = c(minT-10, maxT+10),
#            constdeath = constdeath)
```






```{r}
case = types[types$Trange==min(types$Trange) & types$Tmin==max(types$Tmin),]
```

### $T_{min}=$ `r case$Tmin[1]`, $T_{range}=$ `r case$Trange[1]`

```{r}
#| fig-align: center
plot_death_comp(Tmin = case$Tmin[1], Trange = case$Trange[1], Topt = case$Topt[1], 
                death_type=par$death_type, death_parameters=par$death, 
                range=c(minT-10, maxT+10))

# plot_death(Tmin = case$Tmin[1], Trange= case$Trange[1], Topt = case$Topt[1], 
#            flatness = as.numeric(par$death_flat), baseline = as.numeric(par$death_basel), pow=as.numeric(par$death_pow), 
#            range = c(minT-10, maxT+10),
#            constdeath = constdeath)
```





```{r}
case = types[types$Trange==max(types$Trange) & types$Tmin==min(types$Tmin),]
```

### $T_{min}=$ `r case$Tmin[1]`, $T_{range}=$ `r case$Trange[1]`

```{r}
#| fig-align: center

plot_death_comp(Tmin = case$Tmin[1], Trange = case$Trange[1], Topt = case$Topt[1], 
                death_type=par$death_type, death_parameters=par$death, 
                range=c(minT-10, maxT+10))


# plot_death(Tmin = case$Tmin[1], Trange= case$Trange[1], Topt = case$Topt[1], 
#            flatness = as.numeric(par$death_flat), baseline = as.numeric(par$death_basel), pow=as.numeric(par$death_pow), 
#            range = c(minT-10, maxT+10),
#            constdeath = constdeath)
```






```{r}
case = types[types$Trange==max(types$Trange) & types$Tmin==max(types$Tmin),]
```

### $T_{min}=$ `r case$Tmin[1]`, $T_{range}=$ `r case$Trange[1]`

```{r}
#| fig-align: center
plot_death_comp(Tmin = case$Tmin[1], Trange = case$Trange[1], Topt = case$Topt[1], 
                death_type=par$death_type, death_parameters=par$death, 
                range=c(minT-10, maxT+10))

# plot_death(Tmin = case$Tmin[1], Trange= case$Trange[1], Topt = case$Topt[1], 
#            flatness = as.numeric(par$death_flat), baseline = as.numeric(par$death_basel), pow=as.numeric(par$death_pow), 
#            range = c(minT-10, maxT+10),
           # constdeath = constdeath)
```

### Most abundant in last generation

```{r}
case = types[types$type == last_types[last_types$abundance == max(last_types$abundance), "type"],]
```

```{r}
#| fig-align: center
plot_death_comp(Tmin = case$Tmin[1], Trange = case$Trange[1], Topt = case$Topt[1], 
                death_type=par$death_type, death_parameters=par$death, 
                range=c(minT-10, maxT+10))

# plot_death(Tmin = case$Tmin[1], Trange= case$Trange[1], Topt = case$Topt[1], 
#            flatness = as.numeric(par$death_flat), baseline = as.numeric(par$death_basel), pow=as.numeric(par$death_pow), 
#            range = c(minT-10, maxT+10),
#            constdeath = constdeath)
```

:::

## Temperature depedence of dormancy

$$h_{sleep}(T) = \frac{h_{range}}{1+e^{T-T_{opt}}} + h_{min}$$
$$h_{wake}(T) = \frac{h_{range}}{1+e^{-(T-T_{opt}) }} + h_{min}$$

| variable    | name         |                                                                     | value                         |
|:------------|:-------------|:--------------------------------------------------------------------|------------------------------:|
| $h_{range}$ | h_range      | range of sleeping                                                   | `r (par$h_range)`        |
| $h_{min}$   | h_min        | baseline sleeping rate                                              | `r (par$h_min)`          |
| $T_{opt}$   |              | optimal temperature computed from $T_{max}$, $T_{min}$ and $b$      | variable                      |

### Most abundant type in last generation


::: panel-tabset

```{r}
case = types[types$Trange==min(types$Trange) & types$Tmin==min(types$Tmin),]
```

### $T_{min}=$ `r case$Tmin[1]`, $T_{range}=$ `r case$Trange[1]`

```{r}
#| fig-align: center
plot_sleep(Tmin=case$Tmin[1], Trange=case$Trange[1], Topt=case$Topt[1], 
           hrange = as.numeric(par$h_range), hmin = as.numeric(par$h_min), range=c(minT-10, maxT+10))
```






```{r}
case = types[types$Trange==min(types$Trange) & types$Tmin==max(types$Tmin),]
```

### $T_{min}=$ `r case$Tmin[1]`, $T_{range}=$ `r case$Trange[1]`

```{r}
#| fig-align: center
plot_sleep(Tmin=case$Tmin[1], Trange=case$Trange[1], Topt=case$Topt[1], 
           hrange = as.numeric(par$h_range), hmin = as.numeric(par$h_min), range=c(minT-10, maxT+10))
```





```{r}
case = types[types$Trange==max(types$Trange) & types$Tmin==min(types$Tmin),]
```

### $T_{min}=$ `r case$Tmin[1]`, $T_{range}=$ `r case$Trange[1]`

```{r}
#| fig-align: center
plot_sleep(Tmin=case$Tmin[1], Trange=case$Trange[1], Topt=case$Topt[1], 
           hrange = as.numeric(par$h_range), hmin = as.numeric(par$h_min), range=c(minT-10, maxT+10))
```






```{r}
case = types[types$Trange==max(types$Trange) & types$Tmin==max(types$Tmin),]
```

### $T_{min}=$ `r case$Tmin[1]`, $T_{range}=$ `r case$Trange[1]`

```{r}
#| fig-align: center
plot_sleep(Tmin=case$Tmin[1], Trange=case$Trange[1], Topt=case$Topt[1], 
           hrange = as.numeric(par$h_range), hmin = as.numeric(par$h_min), range=c(minT-10, maxT+10))
```

### Most abundant in last generation

```{r}
case = types[types$type == last_types[last_types$abundance == max(last_types$abundance), "type"],]
```

```{r}
#| fig-align: center
plot_sleep(Tmin=case$Tmin[1], Trange=case$Trange[1], Topt=case$Topt[1], 
           hrange = as.numeric(par$h_range), hmin = as.numeric(par$h_min), range=c(minT-10, maxT+10))
```

:::

## Put it all together for the "winner"

::: panel-tabset

### plot

```{r, eval=T}
Tmin = case$Tmin[1]
Trange = case$Trange[1]
Tmax = Tmin+Trange[1]
Topt = case$Topt[1]
```


```{r winner_props_all, eval=T}
#| fig-asp: 0.4
#| fig-align: center
#| out-width: 100%

reses <- seq(0,10)

#cols <-brewer.pal(length(reses), "BrBG")

birth <- 
  ggplot()+
    #scale_colour_manual(values=cols, labels=as.character(reses), name=bquote(paste( N == {} )) )+
    labs(x="Temperature", y = "Birth rate"#, 
         # caption = bquote(paste(T[min] == .(Tmin) ,
         #                        ", ", T[max] == .(Tmax), 
         #                        ", ", T[range] == .(Trange), 
         #                        ", ", A == .(A), 
         #                        ", ", b == .(b), 
         #                        ", ", M == 1, 
         #                        ", ", d[K] == 100,
         #                        ", ", delta[N] == 0.2))
         )+
    #coord_cartesian(ylim=c(-0.5, 1))+
    theme(legend.position = "top", 
          axis.title.x = element_blank()#, 
          #axis.text.x = element_blank(), axis.ticks.x = element_blank()
          )


for(res in reses){
  birth <- birth +
    geom_function(fun = only_rep, 
                  args=list(R=res, 
                            Tmin=Tmin, Trange=Trange, 
                            b=case$b, A=as.numeric(par$`Eppley-scale`), 
                            attack=as.numeric(par$attack), handling=as.numeric(par$handling)), 
                  xlim = c(minT-10, maxT+10), 
                  color=as.character(res+1)  )
}


death <- ggplot()+
  geom_function(fun = d9_14, 
                xlim=c(minT-10, maxT+10), 
                args=list(Tmin=Tmin, Trange=Trange, Topt=Topt,
                          death_variables=par$death, death_type=par$death_type 
                          ))+
  #coord_cartesian(ylim=c(0, 1))+
  labs(y="Death rate", x="Temperature")+
  scale_y_continuous(position = "right")+
  theme(
    axis.title.x = element_blank(), 
    axis.ticks.y = element_blank(),
    axis.text.y = element_blank()
  )

death <- death + coord_cartesian(ylim= layer_scales(birth)$y$range$range)

Rn <- ggplot()+
  geom_rect(aes(xmin=Tmin, xmax=Tmax, ymin=-Inf, ymax=Inf), fill="red", alpha=0.1) +
  #scale_colour_manual(values=cols, labels=names(cols), name=bquote(paste( sum(), N == {} )) )+
  labs(x="Temperature", y = "Net replication rate", 
       caption = bquote(paste(T[min] == .(Tmin) ,
                              ", ", T[max] == .(Tmax), 
                              ", ", T[range] == .(Trange), 
                              ", ", T[opt] == .(Topt), 
                              # ", ", A == .(A), 
                               ", ", b == .(case$b)#, 
                              # ", ", M == 1, 
                              # ", ", d[K] == 100,
                              # ", ", delta[N] == 0.2
                              ))
       )+
  #coord_cartesian(ylim=c(-1, 1))+
  theme(legend.position = "top")

for(res in reses){
  Rn <- Rn +
    geom_function(fun = net_rep, 
                args=list(
                  R=res,
                  death_variables=par$death,
                  death_type=par$death_type,
                  A=as.numeric(par$`Eppley-scale`), 
                  Tmin=Tmin, Trange=Trange, 
                  b=case$b, 
                  attack = as.numeric(par$attack), handling = as.numeric(par$handling)
                  ), 
                xlim = c(minT-10, maxT+10),
                color=as.character(res+1))
}

Rn = Rn + coord_cartesian(ylim=c(max(layer_scales(Rn)$y$range$range[1], -abs(layer_scales(Rn)$y$range$range[2])),NA ))


plot_grid(plot_grid(birth, death, ncol=2, align="h", rel_widths = c(0.6, 0.4)), Rn, ncol=1, rel_heights = c(1, 2))
```


### in 3D

```{r winner_propsall_3Dplot, eval=T}
temp <- seq(minT-10, maxT+10, 0.1)
resource <- seq(0, 10)


R <- outer(temp, resource, net_rep, 
           #flatness=as.numeric(par$death_flat), baseline=as.numeric(par$death_basel), pow=as.numeric(par$death_pow), 
           death_variables=par$death,
           death_type=par$death_type,
           A=as.numeric(par$`Eppley-scale`), 
           Tmin=Tmin, Trange=Trange, 
           b=case$b, 
           attack = as.numeric(par$attack), handling = as.numeric(par$handling))


plot_ly(y=temp, x=resource) |>
  add_surface(z=R, contours = list(
    z = list(
      show=TRUE,
      usecolormap=TRUE,
      project=list(z=TRUE),
      highlight=FALSE
      ),
    x = list(
      highlightcolor="#ff0000",
      show=F
    ),
    y = list(
      highlight= FALSE
    )
    
  )) |>
  layout(scene = list(
            xaxis = list(title = 'Resource'), 
            yaxis = list(title = 'Temperature'),
            zaxis = list(title = 'Replication rate'),
            camera = list(
              eye = list(z=0.5, y = 0.1, x=2)
            )
        )
  )
```

### contour

```{r winner_propsall_countour, cache=F, eval=T}
plot_ly(x=resource, y=temp, z=R, type="contour")|>
  layout(
            xaxis = list(title = 'Resource', autorange="reversed"), 
            yaxis = list(title = 'Temperature')
  )

```


:::